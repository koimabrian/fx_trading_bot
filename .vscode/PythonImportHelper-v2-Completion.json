[
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.models.database",
        "description": "src.models.database",
        "isExtraImport": true,
        "detail": "src.models.database",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.models.database",
        "description": "src.models.database",
        "isExtraImport": true,
        "detail": "src.models.database",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.models.database",
        "description": "src.models.database",
        "isExtraImport": true,
        "detail": "src.models.database",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.models.database",
        "description": "src.models.database",
        "isExtraImport": true,
        "detail": "src.models.database",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.models.database",
        "description": "src.models.database",
        "isExtraImport": true,
        "detail": "src.models.database",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.models.database",
        "description": "src.models.database",
        "isExtraImport": true,
        "detail": "src.models.database",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ta",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ta",
        "description": "ta",
        "detail": "ta",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "MT5Connector",
        "importPath": "src.mt5_connector",
        "description": "src.mt5_connector",
        "isExtraImport": true,
        "detail": "src.mt5_connector",
        "documentation": {}
    },
    {
        "label": "StrategyManager",
        "importPath": "src.strategy_manager",
        "description": "src.strategy_manager",
        "isExtraImport": true,
        "detail": "src.strategy_manager",
        "documentation": {}
    },
    {
        "label": "BacktestRunner",
        "importPath": "src.backtest_runner",
        "description": "src.backtest_runner",
        "isExtraImport": true,
        "detail": "src.backtest_runner",
        "documentation": {}
    },
    {
        "label": "setup_parser",
        "importPath": "src.ui.cli",
        "description": "src.ui.cli",
        "isExtraImport": true,
        "detail": "src.ui.cli",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "importPath": "src.ui.gui.dashboard",
        "description": "src.ui.gui.dashboard",
        "isExtraImport": true,
        "detail": "src.ui.gui.dashboard",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "MetaTrader5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "MetaTrader5",
        "description": "MetaTrader5",
        "detail": "MetaTrader5",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "RSIStrategy",
        "importPath": "src.strategies.rsi_strategy",
        "description": "src.strategies.rsi_strategy",
        "isExtraImport": true,
        "detail": "src.strategies.rsi_strategy",
        "documentation": {}
    },
    {
        "label": "MACDStrategy",
        "importPath": "src.strategies.macd_strategy",
        "description": "src.strategies.macd_strategy",
        "isExtraImport": true,
        "detail": "src.strategies.macd_strategy",
        "documentation": {}
    },
    {
        "label": "LSTMStrategy",
        "kind": 6,
        "importPath": "src.ml_strategies.lstm_strategy",
        "description": "src.ml_strategies.lstm_strategy",
        "peekOfCode": "class LSTMStrategy:\n    def __init__(self, params):\n        \"\"\"Load LSTM model and initialize parameters\"\"\"\n        self.symbol = params.get('symbol', 'EURUSD')\n        self.model = self.build_model()\n        self.lookback = params.get('lookback', 20)\n    def build_model(self):\n        model = tf.keras.Sequential([\n            tf.keras.layers.LSTM(32, input_shape=(20, 1), return_sequences=False),\n            tf.keras.layers.Dense(1, activation='sigmoid')",
        "detail": "src.ml_strategies.lstm_strategy",
        "documentation": {}
    },
    {
        "label": "RandomForestStrategy",
        "kind": 6,
        "importPath": "src.ml_strategies.random_forest_strategy",
        "description": "src.ml_strategies.random_forest_strategy",
        "peekOfCode": "class RandomForestStrategy:\n    def __init__(self, params):\n        \"\"\"Load Random Forest model and initialize parameters\"\"\"\n        self.model = RandomForestClassifier(n_estimators=50, max_depth=5)\n        self.symbol = params.get('symbol', 'EURUSD')\n        self.features = ['rsi', 'macd']\n    def train(self, data):\n        \"\"\"Train Random Forest model\"\"\"\n        X = data[self.features]\n        y = (data['close'].shift(-1) > data['close']).astype(int)",
        "detail": "src.ml_strategies.random_forest_strategy",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "src.models.database",
        "description": "src.models.database",
        "peekOfCode": "class Database:\n    def __init__(self, db_path: str):\n        \"\"\"Initialize SQLite connection\"\"\"\n        self.db_path = db_path.replace(\"/\", \"\\\\\") if sys.platform == \"win32\" else db_path  # Windows path compatibility\n        self.conn: Optional[sqlite3.Connection] = None\n        self.logger = logging.getLogger(__name__)\n    def connect(self) -> None:\n        \"\"\"Establish database connection\"\"\"\n        try:\n            self.conn = sqlite3.connect(self.db_path)",
        "detail": "src.models.database",
        "documentation": {}
    },
    {
        "label": "StrategyModel",
        "kind": 6,
        "importPath": "src.models.strategy_model",
        "description": "src.models.strategy_model",
        "peekOfCode": "class StrategyModel:\n    def __init__(self, db: Database):\n        self.db = db\n        self.logger = logging.getLogger(__name__)\n    def save(self, name: str, parameters: Dict[str, Any], filters: Dict[str, Any],\n             score: float, status: str, is_ml: bool) -> int:\n        \"\"\"Save a strategy to the database\"\"\"\n        query = \"\"\"\n            INSERT INTO strategies (name, parameters, filters, score, status, is_ml)\n            VALUES (?, ?, ?, ?, ?, ?)",
        "detail": "src.models.strategy_model",
        "documentation": {}
    },
    {
        "label": "MACDStrategy",
        "kind": 6,
        "importPath": "src.strategies.macd_strategy",
        "description": "src.strategies.macd_strategy",
        "peekOfCode": "class MACDStrategy:\n    def __init__(self, params):\n        \"\"\"Initialize strategy parameters from config\"\"\"\n        self.fast_period = params.get('fast_period', 12)\n        self.slow_period = params.get('slow_period', 26)\n        self.signal_period = params.get('signal_period', 9)\n        self.symbol = params.get('symbol', 'EURUSD')\n    def generate_signal(self):\n        \"\"\"Implement MACD signal generation logic\"\"\"\n        from mt5_connector import MT5Connector",
        "detail": "src.strategies.macd_strategy",
        "documentation": {}
    },
    {
        "label": "RSIStrategy",
        "kind": 6,
        "importPath": "src.strategies.rsi_strategy",
        "description": "src.strategies.rsi_strategy",
        "peekOfCode": "class RSIStrategy:\n    def __init__(self, params):\n        \"\"\"Initialize strategy parameters from config\"\"\"\n        self.period = params.get('period', 14)\n        self.overbought = params.get('overbought', 70)\n        self.oversold = params.get('oversold', 30)\n        self.symbol = params.get('symbol', 'EURUSD')\n        self.logger = logging.getLogger(__name__)\n        self.db = Database('src\\\\data\\\\market_data.sqlite' if sys.platform == 'win32' else 'src/data/market_data.sqlite')\n        self.db.connect()",
        "detail": "src.strategies.rsi_strategy",
        "documentation": {}
    },
    {
        "label": "BacktestVisualizer",
        "kind": 6,
        "importPath": "src.ui.gui.backtest_visualizer",
        "description": "src.ui.gui.backtest_visualizer",
        "peekOfCode": "class BacktestVisualizer(QtWidgets.QWidget):\n    def __init__(self):\n        \"\"\"Initialize backtest visualizer UI components\"\"\"\n        super().__init__()\n        self.logger = logging.getLogger(__name__)\n        self.init_ui()\n    def init_ui(self):\n        \"\"\"Set up UI layout\"\"\"\n        layout = QtWidgets.QVBoxLayout(self)\n        self.metrics_label = QtWidgets.QLabel(\"Backtest Metrics: N/A\")",
        "detail": "src.ui.gui.backtest_visualizer",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "kind": 6,
        "importPath": "src.ui.gui.dashboard",
        "description": "src.ui.gui.dashboard",
        "peekOfCode": "class Dashboard(QtWidgets.QMainWindow):\n    def __init__(self):\n        \"\"\"Initialize dashboard UI components\"\"\"\n        super().__init__()\n        self.setWindowTitle(\"FX Trading Bot Dashboard\")\n        self.setStyleSheet(\"\"\"\n            QMainWindow { background-color: #0D1B2A; color: white; }\n            QPushButton { background-color: #FF6B6B; color: white; padding: 5px; }\n            QLabel { color: white; }\n        \"\"\")",
        "detail": "src.ui.gui.dashboard",
        "documentation": {}
    },
    {
        "label": "FilterEditor",
        "kind": 6,
        "importPath": "src.ui.gui.filter_editor",
        "description": "src.ui.gui.filter_editor",
        "peekOfCode": "class FilterEditor(QtWidgets.QWidget):\n    def __init__(self):\n        \"\"\"Initialize filter editor UI components\"\"\"\n        super().__init__()\n        self.logger = logging.getLogger(__name__)\n        self.init_ui()\n    def init_ui(self):\n        \"\"\"Set up UI layout\"\"\"\n        layout = QtWidgets.QVBoxLayout(self)\n        self.filter_input = QtWidgets.QTextEdit()",
        "detail": "src.ui.gui.filter_editor",
        "documentation": {}
    },
    {
        "label": "PartnerDashboard",
        "kind": 6,
        "importPath": "src.ui.gui.partner_dashboard",
        "description": "src.ui.gui.partner_dashboard",
        "peekOfCode": "class PartnerDashboard(QtWidgets.QMainWindow):\n    def __init__(self):\n        \"\"\"Initialize partner dashboard UI components\"\"\"\n        super().__init__()\n        self.setWindowTitle(\"Partner Dashboard\")\n        self.setStyleSheet(\"\"\"\n            QMainWindow { background-color: #0D1B2A; color: white; }\n            QLabel { color: white; }\n        \"\"\")\n        if not self.authenticate():",
        "detail": "src.ui.gui.partner_dashboard",
        "documentation": {}
    },
    {
        "label": "setup_parser",
        "kind": 2,
        "importPath": "src.ui.cli",
        "description": "src.ui.cli",
        "peekOfCode": "def setup_parser():\n    \"\"\"Define CLI arguments for strategy, backtest, and ML model management\"\"\"\n    parser = argparse.ArgumentParser(description=\"FX Trading Bot CLI\")\n    parser.add_argument('--mode', choices=['backtest', 'live', 'gui'], default='backtest',\n                        help=\"Operation mode: backtest, live, or gui\")\n    parser.add_argument('--strategy', default='rsi', help=\"Strategy to run (e.g., rsi, macd, ml_random_forest)\")\n    return parser\ndef main():\n    \"\"\"Implement main CLI logic for user interaction\"\"\"\n    parser = setup_parser()",
        "detail": "src.ui.cli",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.ui.cli",
        "description": "src.ui.cli",
        "peekOfCode": "def main():\n    \"\"\"Implement main CLI logic for user interaction\"\"\"\n    parser = setup_parser()\n    args = parser.parse_args()\n    logging.info(f\"Starting CLI with mode: {args.mode}, strategy: {args.strategy}\")\n    from main import main as run_bot\n    run_bot()",
        "detail": "src.ui.cli",
        "documentation": {}
    },
    {
        "label": "AuthManager",
        "kind": 6,
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "peekOfCode": "class AuthManager:\n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n        # Hardcoded credentials for testing (to be replaced with DB-driven auth)\n        self.users = {\n            \"admin\": bcrypt.hashpw(\"admin123\".encode('utf-8'), bcrypt.gensalt()),\n            \"partner\": bcrypt.hashpw(\"partner123\".encode('utf-8'), bcrypt.gensalt()),\n        }\n    def authenticate(self, username: str, password: str, role: str = \"admin\") -> bool:\n        \"\"\"Authenticate user or partner\"\"\"",
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "BacktestRunner",
        "kind": 6,
        "importPath": "src.backtest_runner",
        "description": "src.backtest_runner",
        "peekOfCode": "class BacktestRunner:\n    def __init__(self, db: Database):\n        \"\"\"Initialize backtest runner with config\"\"\"\n        self.db = db\n        self.logger = logging.getLogger(__name__)\n        # Ensure results directory exists\n        results_dir = 'src\\\\results' if sys.platform == 'win32' else 'src/results'\n        os.makedirs(results_dir, exist_ok=True)\n        self.results_dir = results_dir\n    def run_backtest(self, strategy_name: str) -> Dict[str, float]:",
        "detail": "src.backtest_runner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main():\n    parser = setup_parser()\n    args = parser.parse_args()\n    logging.debug(f\"Starting bot with mode: {args.mode}, strategy: {args.strategy}\")\n    # Initialize database\n    db_path = 'src\\\\data\\\\market_data.sqlite' if sys.platform == 'win32' else 'src/data/market_data.sqlite'\n    db = Database(db_path)\n    db.connect()\n    # Initialize MT5 connection only for live trading or GUI mode\n    mt5 = MT5Connector()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "log_dir",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "log_dir = 'src\\\\logs' if sys.platform == 'win32' else 'src/logs'\nos.makedirs(log_dir, exist_ok=True)\n# Ensure data directory exists\ndata_dir = 'src\\\\data' if sys.platform == 'win32' else 'src/data'\nos.makedirs(data_dir, exist_ok=True)\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler(os.path.join(log_dir, 'terminal_log.txt')),",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "data_dir = 'src\\\\data' if sys.platform == 'win32' else 'src/data'\nos.makedirs(data_dir, exist_ok=True)\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler(os.path.join(log_dir, 'terminal_log.txt')),\n        logging.StreamHandler(sys.stdout)  # Output to console\n    ]\n)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "MLStrategyManager",
        "kind": 6,
        "importPath": "src.ml_strategy_manager",
        "description": "src.ml_strategy_manager",
        "peekOfCode": "class MLStrategyManager:\n    def __init__(self, db: Database):\n        \"\"\"Initialize ML strategy manager with config\"\"\"\n        self.db = db\n        self.strategies = []\n        self.redis_client = redis.Redis(host='localhost', port=6379, db=0)\n        self.logger = logging.getLogger(__name__)\n        self.load_config()\n    def load_config(self):\n        \"\"\"Load ML strategy configurations\"\"\"",
        "detail": "src.ml_strategy_manager",
        "documentation": {}
    },
    {
        "label": "MT5Connector",
        "kind": 6,
        "importPath": "src.mt5_connector",
        "description": "src.mt5_connector",
        "peekOfCode": "class MT5Connector:\n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n        # Load credentials from config.yaml or environment variables\n        with open('src/config/config.yaml', 'r') as file:\n            config = yaml.safe_load(file)\n        mt5_config = config.get('mt5', {})\n        self.login = int(os.getenv(\"MT5_LOGIN\", mt5_config.get('login', 0)))\n        self.password = os.getenv(\"MT5_PASSWORD\", mt5_config.get('password', \"\"))\n        self.server = os.getenv(\"MT5_SERVER\", mt5_config.get('server', \"\"))",
        "detail": "src.mt5_connector",
        "documentation": {}
    },
    {
        "label": "DataSetup",
        "kind": 6,
        "importPath": "src.setup_data",
        "description": "src.setup_data",
        "peekOfCode": "class DataSetup:\n    def __init__(self, db: Database):\n        \"\"\"Initialize data setup with config\"\"\"\n        self.db = db\n        self.mt5 = MT5Connector()\n        self.logger = logging.getLogger(__name__)\n    def initialize_database(self) -> None:\n        \"\"\"Initialize SQLite database\"\"\"\n        try:\n            self.db.create_tables()",
        "detail": "src.setup_data",
        "documentation": {}
    },
    {
        "label": "StrategyManager",
        "kind": 6,
        "importPath": "src.strategy_manager",
        "description": "src.strategy_manager",
        "peekOfCode": "class StrategyManager:\n    def __init__(self, db: Database):\n        \"\"\"Initialize strategy manager with config and database\"\"\"\n        self.db = db\n        self.strategies = []\n        self.logger = logging.getLogger(__name__)\n        self.load_config()\n    def load_config(self) -> None:\n        \"\"\"Load strategy configurations from YAML and store in database\"\"\"\n        try:",
        "detail": "src.strategy_manager",
        "documentation": {}
    }
]